<craft name="fractal" position="absolute">
    <parameter name="depth" default="3" type="int"/>
    <parameter name="ratio1" default="0.67" type="float"/>
    <parameter name="ratio2" default="0.67" type="float"/>
    <parameter name="angle1" default="60" type="int"/>
    <parameter name="angle2" default="60" type="int"/>
    <parameter name="width" default="50" type="int"/>
    <parameter name="height" default="50" type="int"/>
    <parameter name="length" default="20" type="int"/>
    <script type="text/craftml">

        var d3 = require('d3')
                
        function main(params) {

            var lines = buildTree(params.depth, 
                    params.ratio1, 
                    params.ratio2, 
                    params.angle1, 
                    params.angle2, 
                    params.width,
                    params.height,
                    params.length)


            var heightScale =
                d3.scale.linear()
                .domain([-1, params.depth])
                .range([4, 1]);

            d3.select("body")
                .selectAll("line")
                .remove()

            d3.select("body")
                .selectAll("line")
                .data(lines)
                .enter()
                .append("line")
                .attr("x", function(d) {
                    return Math.min(d.x0, d.x)
                })
                .attr("y", function(d) {
                    return Math.min(d.y0, d.y)
                })
                .attr("x1", function(d) {
                    return d.x0;
                })
                .attr("y1", function(d) {
                    return d.y0;
                })
                .attr("x2", function(d) {
                    return d.x;
                })
                .attr("y2", function(d) {
                    return d.y;
                })
                .attr("height", function(d) {
                    return heightScale(d.level)
                })

            var xml = d3.select("body").html()
            console.log(xml)

            return xml
        }
        function treeLine(x0, y0, x, y, l, angle, level) {
            this.x0 = x0;
            this.y0 = y0;
            this.x = x;
            this.y = y;
            this.len = l;
            this.angle = angle
            this.level = level
        }

        function toRadians(angle) {
            return angle * (Math.PI / 180);
        }

        function nextLines(starting, ratio1, ratio2, angle1, angle2, level) {
            var x1 = starting.x;
            var y1 = starting.y;
            var theta = starting.angle;
            var draw_len = starting.len;
            var x21 = x1 + ratio1 * draw_len * Math.cos(toRadians(theta - angle1))
            var y21 = y1 + ratio1 * draw_len * Math.sin(toRadians(theta - angle1))
            var line1 = new treeLine(x1, y1, x21, y21, ratio1 * draw_len, theta - angle1, level)
            var x22 = x1 + ratio2 * draw_len * Math.cos(toRadians(theta + angle2))
            var y22 = y1 + ratio2 * draw_len * Math.sin(toRadians(theta + angle2))
            var line2 = new treeLine(x1, y1, x22, y22, ratio2 * draw_len, theta + angle2, level)
            return [line1, line2];
        }

        function buildTree(depth, ratio1, ratio2, angle1, angle2, width, height, length) {
            var root = new treeLine(0, length, 0, 0, length, -90, -1)
            console.log(root)
            var lines = [root]
            var leaves = [root]
            for (var i = 0; i <= depth; i++) {
                var newLeaves = []
                for (var seed in leaves) {                    
                    var newLines = nextLines(leaves[seed], ratio1, ratio2, angle1, angle2, i)
                    for (var addons in newLines) {
                        lines.push(newLines[addons])
                        newLeaves.push(newLines[addons])
                    }
                }
                leaves = newLeaves.slice();
            }
            return lines
        }

    </script>
</craft>