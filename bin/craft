#!/usr/bin/env node

var craft = require('../lib/craft'),
    fs = require('fs'),
    program = require('commander'),
    open = require('open'),
    path = require('path'),
    glob = require('glob'),
    _s = require('../lib/solids')
Promise = require('bluebird')

program
    .command('build src')
    .description('build src into an stl file')
    .action(function(src, options) {
        build(src)
    })

program
    .command('preview src')
    .description('preview src in the browser')
    .option('-p, --port [port]', 'Port')
    .action(function(src, options) {
        preview(src, options)
    })


var app = require('../viewer/app.js')

program
    .command('viewer')
    .description('run setup commands for all envs')
    .action(function(src, options) {
        preview(src)
    })

function build(src) {
    var xml = fs.readFileSync(src, 'utf8')

    var absPath = path.resolve(src)
    var basePath = path.dirname(absPath)

    var context = {
        basePath: basePath
    }

    craft.build(xml, context)
        .then(function(csg) {

            var stlstring = csg.toStlString()
            var dest = src.replace('.xml', '.stl')
            console.log('writing to %s', dest)
            fs.writeFileSync(dest, stlstring, 'utf8')
            return dest

        })
}

var watchGlob = require('watch-glob')
var open = require('open')
var http = require('http').Server(app)
var io = require('socket.io')(http)
var findPort = require('find-port')

var request = Promise.promisifyAll(require('request'))

// load gist
// https://gist.githubusercontent.com/
function loadGist(src) {
    var m = src.match(/^https:\/\/gist.github.com\/(.*)/)
    var url = 'https://gist.githubusercontent.com/' + m[1] + '/raw/index.xml'
    return request
        .getAsync({
            url: url
        })
        .spread(function(response, body) {
            return {
                basePath: 'https://gist.githubusercontent.com/' + m[1] + '/raw/',
                contents: body,
                src: src,
                url: 'http://gist.github.com/' + m[1]
            }
        })
}

function preview(src, options) {

    if (src.match(/^https:\/\/gist.github.com\/(.*)/)) {
        _preview_gist(src, options)
    } else {
        _preview_locally(src, options)
    }
}

function _preview_gist(src, options) {

    var m = src.match(/^https:\/\/gist.github.com\/(.*)/)
    // loadGist(m)
    //     .then(function(file) {

    //         // io.on('connection', function(socket) {
    //         //     socket.on('ready', function() {
    //         //         socket.emit('modified', file)
    //         //     })
    //         //     socket.on('disconnect', function() {
    //         //         // TODO: auto exit the server
    //         //     })
    //         // })

    // find a port automatically
    findPort(8100, 8199, function(ports) {
        if (ports.length === 0) {
            throw new Error('no available ports found between 8100 - 8199')
        } else {
            var port = ports.pop()
            app.port = port
            // start the server for previewing
            http.listen(port, function() {
                console.log('previewing ' + src + ' at http://localhost:' + port)
                console.log('(press ctrl-c to quit)')
                var url = 'http://localhost:' + port + '/gist/' + m[1]
                open(url)
            })
        }
    })
        // })
}


var parse = require('../lib/parse')

function _preview_locally(src, options) {

    var sockets = []

    watchGlob([src], {
        callbackArg: 'relative'
    }, function(filePath) {

        var contents = fs.readFileSync(src, 'utf8')
        sockets.forEach(function(socket) {
            socket.emit('modified', {
                contents: contents
            })
        })
    })

    io.on('connection', function(socket) {
        sockets.push(socket)
        socket.on('ready', function() {
            var contents = fs.readFileSync(src, 'utf8')

            var context = {}
            context.basePath = path.dirname(src)
            // parse(contents, context)
            //     .then(function(parsed) {
            //         console.log(parsed)
            //         socket.emit('parsed', {
            //             src: src,
            //             parsed: parsed
            //         })
            //     })

            craft
                .preview(contents, context)
                .then(function(solids) {
                    console.log('worker preview done', solids)
                    var csgs = _s(solids).csgs()
                    var result = {}
                    result.csgs = csgs.map(function(csg) {
                        return {
                            stl: csg.toStlString()
                        }
                    })
                    if (solids.length > 0){
                        var s = solids[0]
                        result.layout = s.layout
                    }

                    // console.log(parsed)
                    socket.emit('rendered', {
                        src: src,
                        contents: contents,
                        rendered: result
                    })
                })

        })

        socket.on('disconnect', function() {
            // TODO: auto exit the server
        })
    })

    // find a port automatically
    findPort(8100, 8199, function(ports) {
        if (ports.length === 0) {
            throw new Error('no available ports found between 8100 - 8199')
        } else {
            var port = ports.pop()
            app.port = port
            // start the server for previewing
            http.listen(port, function() {
                console.log('previewing ' + src + ' at http://localhost:' + port)
                console.log('(press ctrl-c to quit)')
                var url = 'http://localhost:' + port
                open(url)
            })
        }
    })
}

program.parse(process.argv)
