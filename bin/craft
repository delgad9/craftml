#!/usr/bin/env node

var craft = require('../lib/craft'),
    fs = require('fs'),
    program = require('commander'),
    open = require('open'),
    path = require('path'),
    glob = require('glob')

program
    .command('build src')
    .description('build src into an stl file')
    .action(function(src, options) {
        build(src)
    })

program
    .command('preview src')
    .description('preview src in the browser')
    .option('-p, --port [port]', 'Port')
    .action(function(src, options) {
        preview(src, options)
    })


var app = require('../viewer/app.js')
var mkdirp = require('mkdirp')

program
    .command('viewer')
    .description('run setup commands for all envs')
    .action(function(src, options) {
        preview(src)
    })

function build(src) {
    var xml = fs.readFileSync(src, 'utf8')

    var absPath = path.resolve(src)
    var basePath = path.dirname(absPath)

    var context = {
        basePath: basePath
    }
    
    craft.build(xml, context)
        .then(function(csg) {

            var stlstring = csg.toStlString()
            var dest = src.replace('.xml', '.stl')
            console.log('writing to %s', dest)
            fs.writeFileSync(dest, stlstring, 'utf8')
            return dest

        })
}

var watchGlob = require('watch-glob')


function doPreviewBuild(src, outputDir) {
    var xml = fs.readFileSync(src, 'utf8')

    var absPath = path.resolve(src)
    var basePath = path.dirname(absPath)

    var context = {
        basePath: basePath
    }
    console.log('previewing ', src)
        
    return craft.preview(xml)
        .then(function(r) {

            // write stls
            var list = []
            r.csgs.forEach(function(csg, i) {
                var stlstring = csg.toStlString()
                var destname = path.basename(src, '.xml')
                var dest = path.join(outputDir, destname) + '-' + i + '.stl'
                    // dest = path.join(outputDir, dest)
                console.log('writing to %s', dest)
                fs.writeFileSync(dest, stlstring, 'utf8')

                list.push(dest)
            })

            fs.writeFileSync(outputDir + '/stls.json', JSON.stringify(list))

        })
}

var mkdirp = require('mkdirp')

function preview(src, options) {

    var outputDir = path.join(process.cwd(), 'build', 'preview')
    mkdirp.sync(outputDir)

    doPreviewBuild(src, outputDir)
        .then(function() {

            watchGlob([src], {
                callbackArg: 'relative'
            }, function(filePath) {

                // console.log('modified', filePath)
                doPreviewBuild(filePath, outputDir)
                // Perform livereload
            })

            var express = require('express')

            app.use('/preview', express.static(outputDir))

            var port = options.port || '5333'

            var server = app.listen(port, function() {

                var host = server.address().address
                    // var port = server.address().port

                console.log('App listening at http://%s:%s', host, port)

            })

            var browserSync = require("browser-sync")

            browserSync({
                port: Number(port) + 1,
                ui: false, // disable UI completely
                files: [outputDir + '/stls.json'],
                proxy: 'localhost:' + port,
                online: false,
                notify: false
            })

        })
}

program.parse(process.argv)