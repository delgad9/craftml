#!/usr/bin/env node

var craft = require('../lib/craft'),
    fs = require('fs'),
    program = require('commander'),
    open = require('open'),
    path = require('path'),
    glob = require('glob'),
    _s = require('../lib/solids')

program
    .command('build src')
    .description('build src into an stl file')
    .action(function(src, options) {
        build(src)
    })

program
    .command('preview src')
    .description('preview src in the browser')
    .option('-p, --port [port]', 'Port')
    .action(function(src, options) {
        preview(src, options)
    })


var app = require('../viewer/app.js')
var mkdirp = require('mkdirp')

program
    .command('viewer')
    .description('run setup commands for all envs')
    .action(function(src, options) {
        preview(src)
    })

function build(src) {
    var xml = fs.readFileSync(src, 'utf8')

    var absPath = path.resolve(src)
    var basePath = path.dirname(absPath)

    var context = {
        basePath: basePath
    }

    craft.build(xml, context)
        .then(function(csg) {

            var stlstring = csg.toStlString()
            var dest = src.replace('.xml', '.stl')
            console.log('writing to %s', dest)
            fs.writeFileSync(dest, stlstring, 'utf8')
            return dest

        })
}

var watchGlob = require('watch-glob')
var open = require('open')
var request = require('request')
var http = require('http').Server(app)
var io = require('socket.io')(http)
var findPort = require('find-port')

function preview(src, options) {

    var sockets = []

    watchGlob([src], {
        callbackArg: 'relative'
    }, function(filePath) {

        var contents = fs.readFileSync(src, 'utf8')
        sockets.forEach(function(socket) {
            socket.emit('modified', {
                contents: contents
            })
        })
    })

    io.on('connection', function(socket) {
        sockets.push(socket)
        socket.on('ready', function() {
            var contents = fs.readFileSync(src, 'utf8')
            socket.emit('modified', {
                contents: contents
            })
        })

        socket.on('disconnect', function() {
            // TODO: auto exit the server
        })
    })

    // find a port automatically
    findPort(8100, 8199, function(ports) {
        if (ports.length === 0) {
            throw new Error('no available ports found between 8100 - 8199')
        } else {
            var port = ports.pop()
            app.port = port
            // start the server for previewing
            http.listen(port, function() {
                console.log('previewing ' + src + ' at http://localhost:' + port)
                console.log('(press ctrl-c to quit)')
                var url = 'http://localhost:' + port
                open(url)
            })
        }
    })
}

program.parse(process.argv)